module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    input phi0_pin,         // phi0 pin from C2
    input misc_pin[4],      // rw, res, m2sel, m2b0
    input addr_pin[16],     // address
    input data_pin[8],      // data pins
    output oe_n_pin,        // output enable (active low)
    input ft_clk,
    input ft_rxf,
    input ft_txe,
    output ft_data[16],
    output ft_be[2],
    output ft_rd,
    output ft_wr,
    output ft_oe
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    
    pipeline addr_clean[16](#DEPTH(2));
    pipeline misc_clean[4](#DEPTH(2));
    pipeline data_clean[8](#DEPTH(2));

    // signal phi0 high
    //edge_detector phi0_high(#RISE(1),#FALL(0));
    edge_detector phi0_high(#RISE(1));
    // signal phi0 low
    //edge_detector phi0_low(#RISE(0),#FALL(1));
    edge_detector phi0_low(#FALL(1));

    // delay 180ns after phi0 low
    pipeline addr_latch(#DEPTH(18));
    
    // delay 450ns after phi0 high
    pipeline data_latch(#DEPTH(45));
    
    // USB controller
    ft600_write_only ft600(.rst(rst),.ft_clk(ft_clk));
    dff addr_misc_bus[21];
  }
  
  phi0_conditioner phi0(.rst(rst),.clk(clk));
  
  blinker myBlinker(.rst(rst),.clk(phi0.out));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    

    phi0.in = phi0_pin;
    addr_clean.in = addr_pin;
    misc_clean.in = misc_pin;
    data_clean.in = data_pin;
    oe_n_pin = 0;
    phi0_high.in = phi0.out;
    phi0_low.in = phi0.out;
    addr_latch.in = phi0_low.out;
    data_latch.in = phi0_high.out;
    
    led = 8x{myBlinker.blink};             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    ft600.ft_rxf = ft_rxf;
    ft600.ft_txe = ft_txe;
    ft_rd = ft600.ft_rd;
    ft_wr = ft600.ft_wr;
    ft_oe = ft600.ft_oe;
    ft_be = ft600.ft_be;
    ft_data = ft600.ft_data;
    
    ft600.ui_din = bx;
    ft600.ui_din_valid = 0;
    
    if (addr_latch.out) {
      addr_misc_bus.d[14:0] = addr_clean.out[14:0];
      addr_misc_bus.d[15] = 0;
      addr_misc_bus.d[16] = addr_clean.out[15];
      addr_misc_bus.d[20:17] = misc_clean.out[3:0];
      //if (!ft600.ui_full) {
      //  ft600.ui_din[15:0] = addr_pin[15:0];
      //  ft600.ui_din[31:16] = 0;
      //  ft600.ui_din_valid = 1;
      //}
    }
    
    if (data_latch.out) {
      if (!ft600.ui_full) {
        ft600.ui_din[20:0] = addr_misc_bus.q[20:0];
        ft600.ui_din[28:21] = data_clean.out[7:0];
        ft600.ui_din[31:29] = 3h7;
        ft600.ui_din_valid = 1;
      }
    }
    
  }
}