/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     DEVICES = 2
*/
module ft600_module_2 (
    input clk,
    input rst,
    input ft_clk,
    input ft_rxf,
    input ft_txe,
    inout [15:0] ft_data,
    inout [1:0] ft_be,
    output reg ft_rd,
    output reg ft_wr,
    output reg ft_oe,
    input [67:0] tx_in,
    output reg [3:0] tx_out,
    output reg [31:0] ui_dout,
    output reg ui_dout_empty,
    input ui_dout_read,
    output reg ui_dout_len_empty,
    input ui_dout_len_read
  );
  
  localparam DEVICES = 2'h2;
  reg [15:0] IO_ft_data_enable;
  wire [15:0] IO_ft_data_read;
  reg [15:0] IO_ft_data_write;
  genvar GEN_ft_data;
  generate
    for (GEN_ft_data = 0; GEN_ft_data < 16; GEN_ft_data = GEN_ft_data + 1) begin
      assign ft_data[GEN_ft_data] = IO_ft_data_enable[GEN_ft_data] ? IO_ft_data_write[GEN_ft_data] : 1'bz;
    end
  endgenerate
  assign IO_ft_data_read = ft_data;
  reg [1:0] IO_ft_be_enable;
  wire [1:0] IO_ft_be_read;
  reg [1:0] IO_ft_be_write;
  genvar GEN_ft_be;
  generate
    for (GEN_ft_be = 0; GEN_ft_be < 2; GEN_ft_be = GEN_ft_be + 1) begin
      assign ft_be[GEN_ft_be] = IO_ft_be_enable[GEN_ft_be] ? IO_ft_be_write[GEN_ft_be] : 1'bz;
    end
  endgenerate
  assign IO_ft_be_read = ft_be;
  
  
  reg M_tx_empty_d, M_tx_empty_q = 1'h0;
  reg [8:0] M_packet_counter_d, M_packet_counter_q = 1'h0;
  localparam IDLE_usb_state = 3'd0;
  localparam WRITING_usb_state = 3'd1;
  localparam PRE_IDLE_usb_state = 3'd2;
  localparam START_READ_usb_state = 3'd3;
  localparam READ_SIZE_usb_state = 3'd4;
  localparam READ_usb_state = 3'd5;
  
  reg [2:0] M_usb_state_d, M_usb_state_q = IDLE_usb_state;
  reg M_read_half_d, M_read_half_q = 1'h0;
  reg [15:0] M_first_half_d, M_first_half_q = 1'h0;
  
  integer i;
  
  reg [1:0] tx_in_sig;
  
  reg [1:0] tx_out_sig;
  
  reg [1:0] M_tx_out_dff_d, M_tx_out_dff_q = 1'h0;
  
  wire [16-1:0] M_write_fifo_dout;
  wire [1-1:0] M_write_fifo_full;
  wire [1-1:0] M_write_fifo_empty;
  wire [1-1:0] M_write_fifo_wr_rst_busy;
  wire [1-1:0] M_write_fifo_rd_rst_busy;
  reg [32-1:0] M_write_fifo_din;
  reg [1-1:0] M_write_fifo_wr_en;
  reg [1-1:0] M_write_fifo_rd_en;
  fifo_generator_0 write_fifo (
    .rst(rst),
    .wr_clk(clk),
    .rd_clk(ft_clk),
    .din(M_write_fifo_din),
    .wr_en(M_write_fifo_wr_en),
    .rd_en(M_write_fifo_rd_en),
    .dout(M_write_fifo_dout),
    .full(M_write_fifo_full),
    .empty(M_write_fifo_empty),
    .wr_rst_busy(M_write_fifo_wr_rst_busy),
    .rd_rst_busy(M_write_fifo_rd_rst_busy)
  );
  
  wire [32-1:0] M_read_fifo_dout;
  wire [1-1:0] M_read_fifo_full;
  wire [1-1:0] M_read_fifo_empty;
  wire [1-1:0] M_read_fifo_wr_rst_busy;
  wire [1-1:0] M_read_fifo_rd_rst_busy;
  reg [32-1:0] M_read_fifo_din;
  reg [1-1:0] M_read_fifo_wr_en;
  reg [1-1:0] M_read_fifo_rd_en;
  fifo_generator_1 read_fifo (
    .rst(rst),
    .wr_clk(ft_clk),
    .rd_clk(clk),
    .din(M_read_fifo_din),
    .wr_en(M_read_fifo_wr_en),
    .rd_en(M_read_fifo_rd_en),
    .dout(M_read_fifo_dout),
    .full(M_read_fifo_full),
    .empty(M_read_fifo_empty),
    .wr_rst_busy(M_read_fifo_wr_rst_busy),
    .rd_rst_busy(M_read_fifo_rd_rst_busy)
  );
  
  wire [1-1:0] M_write_fifo_hdr_dout;
  wire [1-1:0] M_write_fifo_hdr_full;
  wire [1-1:0] M_write_fifo_hdr_empty;
  reg [1-1:0] M_write_fifo_hdr_din;
  reg [1-1:0] M_write_fifo_hdr_wr_en;
  reg [1-1:0] M_write_fifo_hdr_rd_en;
  fifo_generator_3 write_fifo_hdr (
    .rst(rst),
    .wr_clk(clk),
    .rd_clk(ft_clk),
    .din(M_write_fifo_hdr_din),
    .wr_en(M_write_fifo_hdr_wr_en),
    .rd_en(M_write_fifo_hdr_rd_en),
    .dout(M_write_fifo_hdr_dout),
    .full(M_write_fifo_hdr_full),
    .empty(M_write_fifo_hdr_empty)
  );
  
  wire [1-1:0] M_read_fifo_hdr_dout;
  wire [1-1:0] M_read_fifo_hdr_full;
  wire [1-1:0] M_read_fifo_hdr_empty;
  reg [1-1:0] M_read_fifo_hdr_din;
  reg [1-1:0] M_read_fifo_hdr_wr_en;
  reg [1-1:0] M_read_fifo_hdr_rd_en;
  fifo_generator_3 read_fifo_hdr (
    .rst(rst),
    .wr_clk(ft_clk),
    .rd_clk(clk),
    .din(M_read_fifo_hdr_din),
    .wr_en(M_read_fifo_hdr_wr_en),
    .rd_en(M_read_fifo_hdr_rd_en),
    .dout(M_read_fifo_hdr_dout),
    .full(M_read_fifo_hdr_full),
    .empty(M_read_fifo_hdr_empty)
  );
  
  always @* begin
    for (i = 1'h0; i < 2'h2; i = i + 1) begin
      tx_in_sig[(i)*1+0-:1] = tx_in[(i)*34+0+0-:1];
    end
  end
  
  always @* begin
    M_tx_out_dff_d = M_tx_out_dff_q;
    
    M_write_fifo_hdr_din = 1'h0;
    M_write_fifo_hdr_wr_en = 1'h0;
    if (M_tx_out_dff_q) begin
      if (tx_in_sig & M_tx_out_dff_q) begin
        tx_out_sig = M_tx_out_dff_q;
      end else begin
        M_write_fifo_hdr_wr_en = 1'h1;
        tx_out_sig = 2'h0;
        M_tx_out_dff_d = 2'h0;
      end
    end else begin
      tx_out_sig = 2'h0;
      for (i = 1'h0; i < 2'h2; i = i + 1) begin
        if (tx_in_sig[(i)*1+0-:1]) begin
          tx_out_sig = 1'h1 << i;
        end
      end
      M_tx_out_dff_d = tx_out_sig;
    end
    M_write_fifo_wr_en = 1'h0;
    M_write_fifo_din = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    for (i = 1'h0; i < 2'h2; i = i + 1) begin
      if (tx_out_sig[(i)*1+0-:1]) begin
        M_write_fifo_wr_en = tx_in[(i)*34+33+0-:1];
        M_write_fifo_din[16+15-:16] = tx_in[(i)*34+1+0+15-:16];
        M_write_fifo_din[0+15-:16] = tx_in[(i)*34+1+16+15-:16];
        tx_out[(i)*2+0+0-:1] = 1'h1;
        tx_out[(i)*2+1+0-:1] = M_write_fifo_full;
      end else begin
        tx_out[(i)*2+0+0-:1] = 1'h0;
        tx_out[(i)*2+1+0-:1] = 1'h0;
      end
    end
    M_read_fifo_rd_en = ui_dout_read;
    ui_dout = M_read_fifo_dout;
    ui_dout_empty = M_read_fifo_empty;
    M_read_fifo_hdr_rd_en = ui_dout_len_read;
    M_read_fifo_hdr_din = 1'h0;
    ui_dout_len_empty = M_read_fifo_hdr_empty;
  end
  
  reg output_enabled;
  
  always @* begin
    M_usb_state_d = M_usb_state_q;
    M_read_half_d = M_read_half_q;
    M_tx_empty_d = M_tx_empty_q;
    M_first_half_d = M_first_half_q;
    M_packet_counter_d = M_packet_counter_q;
    
    output_enabled = 1'h1;
    ft_oe = 1'h1;
    ft_rd = 1'h1;
    ft_wr = 1'h1;
    IO_ft_data_write = M_write_fifo_dout;
    IO_ft_be_write = 2'h3;
    M_write_fifo_hdr_rd_en = 1'h0;
    M_write_fifo_rd_en = 1'h0;
    M_read_fifo_hdr_wr_en = 1'h0;
    M_read_fifo_wr_en = 1'h0;
    M_read_fifo_din = 1'h0;
    M_tx_empty_d = ft_txe;
    
    case (M_usb_state_q)
      IDLE_usb_state: begin
        if (M_write_fifo_hdr_empty == 1'h0 && M_tx_empty_q == 1'h0) begin
          M_packet_counter_d[1+7-:8] = M_write_fifo_dout[0+7-:8];
          M_packet_counter_d[0+0-:1] = 1'h1;
          M_write_fifo_hdr_rd_en = 1'h1;
          M_usb_state_d = WRITING_usb_state;
          M_write_fifo_rd_en = 1'h1;
          ft_wr = 1'h0;
        end else begin
          if (M_read_fifo_hdr_full == 1'h0 && M_read_fifo_full == 1'h0 && ft_rxf == 1'h0) begin
            M_usb_state_d = START_READ_usb_state;
            output_enabled = 1'h0;
          end
        end
      end
      WRITING_usb_state: begin
        if (M_packet_counter_q == 1'h0) begin
          M_usb_state_d = PRE_IDLE_usb_state;
        end else begin
          M_packet_counter_d = M_packet_counter_q - 1'h1;
          M_write_fifo_rd_en = 1'h1;
          ft_wr = 1'h0;
        end
      end
      PRE_IDLE_usb_state: begin
        M_usb_state_d = IDLE_usb_state;
      end
      START_READ_usb_state: begin
        ft_rd = 1'h0;
        output_enabled = 1'h0;
        M_usb_state_d = READ_SIZE_usb_state;
      end
      READ_SIZE_usb_state: begin
        ft_rd = 1'h0;
        output_enabled = 1'h0;
        M_read_half_d = 1'h1;
        M_first_half_d = IO_ft_data_read;
        M_packet_counter_d[1+7-:8] = IO_ft_data_read[0+7-:8];
        M_packet_counter_d[0+0-:1] = 1'h1;
        M_usb_state_d = READ_usb_state;
      end
      READ_usb_state: begin
        ft_rd = 1'h0;
        output_enabled = 1'h0;
        if (M_packet_counter_q == 1'h0) begin
          ft_rd = 1'h1;
          M_read_fifo_hdr_wr_en = 1'h1;
          M_usb_state_d = PRE_IDLE_usb_state;
        end else begin
          M_packet_counter_d = M_packet_counter_q - 1'h1;
          M_read_half_d = !M_read_half_q;
          if (M_read_half_q) begin
            M_read_fifo_din[16+15-:16] = IO_ft_data_read;
            M_read_fifo_din[0+15-:16] = M_first_half_q;
            M_read_fifo_wr_en = 1'h1;
          end else begin
            M_first_half_d = IO_ft_data_read;
          end
        end
      end
    endcase
    ft_oe = output_enabled;
    IO_ft_data_enable = {5'h10{output_enabled}};
    IO_ft_be_enable = output_enabled;
  end
  
  always @(posedge ft_clk) begin
    M_tx_empty_q <= M_tx_empty_d;
    M_packet_counter_q <= M_packet_counter_d;
    M_read_half_q <= M_read_half_d;
    M_first_half_q <= M_first_half_d;
    M_usb_state_q <= M_usb_state_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tx_out_dff_q <= 1'h0;
    end else begin
      M_tx_out_dff_q <= M_tx_out_dff_d;
    end
  end
  
endmodule
