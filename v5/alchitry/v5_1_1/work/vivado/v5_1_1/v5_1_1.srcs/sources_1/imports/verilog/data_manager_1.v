/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module data_manager_1 (
    input clk1,
    input clk2,
    input clk_locked,
    inout [15:0] ddr3_dq,
    inout [1:0] ddr3_dqs_n,
    inout [1:0] ddr3_dqs_p,
    output reg rst,
    output reg ui_clk,
    output reg [13:0] ddr3_addr,
    output reg [2:0] ddr3_ba,
    output reg ddr3_ras_n,
    output reg ddr3_cas_n,
    output reg ddr3_we_n,
    output reg ddr3_reset_n,
    output reg ddr3_ck_p,
    output reg ddr3_ck_n,
    output reg ddr3_cke,
    output reg ddr3_cs_n,
    output reg [1:0] ddr3_dm,
    output reg ddr3_odt,
    input [15:0] addr_in,
    input addr_in_en,
    input rw,
    input [7:0] data_in,
    input data_in_en,
    input reset_pin_in,
    input data_begin_in,
    output reg [7:0] data_out,
    output reg data_out_en,
    output reg inhibit_assert,
    output reg irq_assert
  );
  
  
  
  wire [14-1:0] M_mig_ddr3_addr;
  wire [3-1:0] M_mig_ddr3_ba;
  wire [1-1:0] M_mig_ddr3_ras_n;
  wire [1-1:0] M_mig_ddr3_cas_n;
  wire [1-1:0] M_mig_ddr3_we_n;
  wire [1-1:0] M_mig_ddr3_reset_n;
  wire [1-1:0] M_mig_ddr3_ck_p;
  wire [1-1:0] M_mig_ddr3_ck_n;
  wire [1-1:0] M_mig_ddr3_cke;
  wire [1-1:0] M_mig_ddr3_cs_n;
  wire [2-1:0] M_mig_ddr3_dm;
  wire [1-1:0] M_mig_ddr3_odt;
  wire [131-1:0] M_mig_mem_out;
  wire [1-1:0] M_mig_ui_clk;
  wire [1-1:0] M_mig_sync_rst;
  reg [1-1:0] M_mig_sys_clk;
  reg [1-1:0] M_mig_clk_ref;
  reg [177-1:0] M_mig_mem_in;
  reg [1-1:0] M_mig_sys_rst;
  mig_wrapper_6 mig (
    .ddr3_dq(ddr3_dq),
    .ddr3_dqs_n(ddr3_dqs_n),
    .ddr3_dqs_p(ddr3_dqs_p),
    .sys_clk(M_mig_sys_clk),
    .clk_ref(M_mig_clk_ref),
    .mem_in(M_mig_mem_in),
    .sys_rst(M_mig_sys_rst),
    .ddr3_addr(M_mig_ddr3_addr),
    .ddr3_ba(M_mig_ddr3_ba),
    .ddr3_ras_n(M_mig_ddr3_ras_n),
    .ddr3_cas_n(M_mig_ddr3_cas_n),
    .ddr3_we_n(M_mig_ddr3_we_n),
    .ddr3_reset_n(M_mig_ddr3_reset_n),
    .ddr3_ck_p(M_mig_ddr3_ck_p),
    .ddr3_ck_n(M_mig_ddr3_ck_n),
    .ddr3_cke(M_mig_ddr3_cke),
    .ddr3_cs_n(M_mig_ddr3_cs_n),
    .ddr3_dm(M_mig_ddr3_dm),
    .ddr3_odt(M_mig_ddr3_odt),
    .mem_out(M_mig_mem_out),
    .ui_clk(M_mig_ui_clk),
    .sync_rst(M_mig_sync_rst)
  );
  
  always @* begin
    M_mig_sys_clk = clk1;
    M_mig_clk_ref = clk2;
    M_mig_sys_rst = !clk_locked;
    rst = M_mig_sync_rst;
    ui_clk = M_mig_ui_clk;
    ddr3_addr = M_mig_ddr3_addr;
    ddr3_ba = M_mig_ddr3_ba;
    ddr3_ras_n = M_mig_ddr3_ras_n;
    ddr3_cas_n = M_mig_ddr3_cas_n;
    ddr3_we_n = M_mig_ddr3_we_n;
    ddr3_reset_n = M_mig_ddr3_reset_n;
    ddr3_ck_p = M_mig_ddr3_ck_p;
    ddr3_ck_n = M_mig_ddr3_ck_n;
    ddr3_cke = M_mig_ddr3_cke;
    ddr3_cs_n = M_mig_ddr3_cs_n;
    ddr3_dm = M_mig_ddr3_dm;
    ddr3_odt = M_mig_ddr3_odt;
  end
  
  wire [17-1:0] M_ssm_addr_out;
  wire [1-1:0] M_ssm_valid_ram_access;
  wire [1-1:0] M_ssm_slot_access;
  wire [3-1:0] M_ssm_c8_owner;
  reg [1-1:0] M_ssm_addr_in_valid;
  mem_ss_manager_7 ssm (
    .clk(M_mig_ui_clk),
    .rw(rw),
    .addr_in(addr_in),
    .bus_reset(reset_pin_in),
    .addr_in_valid(M_ssm_addr_in_valid),
    .addr_out(M_ssm_addr_out),
    .valid_ram_access(M_ssm_valid_ram_access),
    .slot_access(M_ssm_slot_access),
    .c8_owner(M_ssm_c8_owner)
  );
  reg [15:0] M_addr_reg_in_d, M_addr_reg_in_q = 1'h0;
  reg M_rw_reg_in_d, M_rw_reg_in_q = 1'h0;
  reg [7:0] M_data_reg_in_d, M_data_reg_in_q = 1'h0;
  reg [7:0] M_data_reg_out_d, M_data_reg_out_q = 1'h0;
  reg M_data_reg_out_en_d, M_data_reg_out_en_q = 1'h0;
  reg M_inhibit_assert_en_d, M_inhibit_assert_en_q = 1'h0;
  localparam IDLE_mgr_state = 2'd0;
  localparam ADDR_RECEIVED_mgr_state = 2'd1;
  localparam DATA_RECEIVED_mgr_state = 2'd2;
  
  reg [1:0] M_mgr_state_d, M_mgr_state_q = IDLE_mgr_state;
  localparam IDLE_emit_state = 3'd0;
  localparam SDRAM_WAIT_READ_emit_state = 3'd1;
  localparam SDRAM_WAIT_WRITE_emit_state = 3'd2;
  localparam SDRAM_WRITE_CMD_emit_state = 3'd3;
  localparam MOCKINGBOARD0_emit_state = 3'd4;
  localparam MOCKINGBOARD1_emit_state = 3'd5;
  
  reg [2:0] M_emit_state_d, M_emit_state_q = IDLE_emit_state;
  wire [8-1:0] M_via0_data_out;
  wire [1-1:0] M_via0_irq;
  wire [8-1:0] M_via0_porta_out;
  wire [8-1:0] M_via0_portb_out;
  wire [1-1:0] M_via0_ca2_out;
  wire [1-1:0] M_via0_cb1_out;
  wire [1-1:0] M_via0_cb2_out;
  reg [8-1:0] M_via0_data_in;
  reg [4-1:0] M_via0_addr;
  reg [1-1:0] M_via0_strobe;
  reg [1-1:0] M_via0_we;
  reg [8-1:0] M_via0_porta_in;
  reg [8-1:0] M_via0_portb_in;
  reg [1-1:0] M_via0_ca1_in;
  reg [1-1:0] M_via0_ca2_in;
  reg [1-1:0] M_via0_cb1_in;
  reg [1-1:0] M_via0_cb2_in;
  reg [1-1:0] M_via0_slow_clock;
  reg [1-1:0] M_via0_reset;
  via6522_8 via0 (
    .clk(M_mig_ui_clk),
    .data_in(M_via0_data_in),
    .addr(M_via0_addr),
    .strobe(M_via0_strobe),
    .we(M_via0_we),
    .porta_in(M_via0_porta_in),
    .portb_in(M_via0_portb_in),
    .ca1_in(M_via0_ca1_in),
    .ca2_in(M_via0_ca2_in),
    .cb1_in(M_via0_cb1_in),
    .cb2_in(M_via0_cb2_in),
    .slow_clock(M_via0_slow_clock),
    .reset(M_via0_reset),
    .data_out(M_via0_data_out),
    .irq(M_via0_irq),
    .porta_out(M_via0_porta_out),
    .portb_out(M_via0_portb_out),
    .ca2_out(M_via0_ca2_out),
    .cb1_out(M_via0_cb1_out),
    .cb2_out(M_via0_cb2_out)
  );
  wire [8-1:0] M_via1_data_out;
  wire [1-1:0] M_via1_irq;
  wire [8-1:0] M_via1_porta_out;
  wire [8-1:0] M_via1_portb_out;
  wire [1-1:0] M_via1_ca2_out;
  wire [1-1:0] M_via1_cb1_out;
  wire [1-1:0] M_via1_cb2_out;
  reg [8-1:0] M_via1_data_in;
  reg [4-1:0] M_via1_addr;
  reg [1-1:0] M_via1_strobe;
  reg [1-1:0] M_via1_we;
  reg [8-1:0] M_via1_porta_in;
  reg [8-1:0] M_via1_portb_in;
  reg [1-1:0] M_via1_ca1_in;
  reg [1-1:0] M_via1_ca2_in;
  reg [1-1:0] M_via1_cb1_in;
  reg [1-1:0] M_via1_cb2_in;
  reg [1-1:0] M_via1_slow_clock;
  reg [1-1:0] M_via1_reset;
  via6522_8 via1 (
    .clk(M_mig_ui_clk),
    .data_in(M_via1_data_in),
    .addr(M_via1_addr),
    .strobe(M_via1_strobe),
    .we(M_via1_we),
    .porta_in(M_via1_porta_in),
    .portb_in(M_via1_portb_in),
    .ca1_in(M_via1_ca1_in),
    .ca2_in(M_via1_ca2_in),
    .cb1_in(M_via1_cb1_in),
    .cb2_in(M_via1_cb2_in),
    .slow_clock(M_via1_slow_clock),
    .reset(M_via1_reset),
    .data_out(M_via1_data_out),
    .irq(M_via1_irq),
    .porta_out(M_via1_porta_out),
    .portb_out(M_via1_portb_out),
    .ca2_out(M_via1_ca2_out),
    .cb1_out(M_via1_cb1_out),
    .cb2_out(M_via1_cb2_out)
  );
  
  always @* begin
    M_mgr_state_d = M_mgr_state_q;
    M_emit_state_d = M_emit_state_q;
    M_data_reg_in_d = M_data_reg_in_q;
    M_data_reg_out_en_d = M_data_reg_out_en_q;
    M_rw_reg_in_d = M_rw_reg_in_q;
    M_data_reg_out_d = M_data_reg_out_q;
    M_inhibit_assert_en_d = M_inhibit_assert_en_q;
    M_addr_reg_in_d = M_addr_reg_in_q;
    
    M_mig_mem_in[31+0-:1] = 1'h0;
    M_mig_mem_in[28+2-:3] = 3'bxxx;
    M_mig_mem_in[0+27-:28] = 1'h0;
    M_mig_mem_in[32+127-:128] = 128'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_mig_mem_in[161+15-:16] = 1'h0;
    M_mig_mem_in[160+0-:1] = 1'h0;
    data_out = M_data_reg_out_q;
    data_out_en = M_data_reg_out_en_q;
    inhibit_assert = M_inhibit_assert_en_q;
    irq_assert = M_via0_irq | M_via1_irq;
    M_via0_reset = M_mig_sync_rst | !reset_pin_in;
    M_via0_we = ~rw;
    M_via0_porta_in = 8'bxxxxxxxx;
    M_via0_portb_in = 8'bxxxxxxxx;
    M_via0_ca1_in = 1'bx;
    M_via0_ca2_in = 1'bx;
    M_via0_cb1_in = 1'bx;
    M_via0_cb2_in = 1'bx;
    M_via0_strobe = 1'h0;
    M_via0_slow_clock = 1'h0;
    M_via0_addr = M_addr_reg_in_q[0+3-:4];
    M_via0_data_in = M_data_reg_in_q;
    M_via1_reset = M_mig_sync_rst | !reset_pin_in;
    M_via1_we = !rw;
    M_via1_porta_in = 8'bxxxxxxxx;
    M_via1_portb_in = 8'bxxxxxxxx;
    M_via1_ca1_in = 1'bx;
    M_via1_ca2_in = 1'bx;
    M_via1_cb1_in = 1'bx;
    M_via1_cb2_in = 1'bx;
    M_via1_strobe = 1'h0;
    M_via1_slow_clock = 1'h0;
    M_via1_addr = M_addr_reg_in_q[0+3-:4];
    M_via1_data_in = M_data_reg_in_q;
    M_ssm_addr_in_valid = 1'h0;
    if (data_begin_in) begin
      M_inhibit_assert_en_d = 1'h0;
    end
    
    case (M_mgr_state_q)
      IDLE_mgr_state: begin
        if (addr_in_en) begin
          M_addr_reg_in_d = addr_in;
          M_ssm_addr_in_valid = 1'h1;
          M_rw_reg_in_d = rw;
          M_data_reg_out_en_d = 1'h0;
          M_mgr_state_d = ADDR_RECEIVED_mgr_state;
        end
        if (data_in_en) begin
          M_data_reg_in_d = data_in;
          M_mgr_state_d = DATA_RECEIVED_mgr_state;
        end
      end
      ADDR_RECEIVED_mgr_state: begin
        M_mgr_state_d = IDLE_mgr_state;
        if (M_rw_reg_in_q == 1'h1) begin
          if (M_ssm_valid_ram_access) begin
            M_data_reg_out_en_d = 1'h1;
            M_mig_mem_in[31+0-:1] = 1'h1;
            M_mig_mem_in[28+2-:3] = 1'h1;
            M_mig_mem_in[0+27-:28] = {8'h00, M_ssm_addr_out, 3'h0};
            M_emit_state_d = SDRAM_WAIT_READ_emit_state;
          end
        end
        if (M_addr_reg_in_q[8+7-:8] == 8'hc4) begin
          if (M_rw_reg_in_q == 1'h1) begin
            M_data_reg_out_en_d = 1'h1;
            if (M_addr_reg_in_q[7+0-:1] == 1'h0) begin
              M_emit_state_d = MOCKINGBOARD0_emit_state;
            end else begin
              M_emit_state_d = MOCKINGBOARD1_emit_state;
            end
          end
        end
      end
      DATA_RECEIVED_mgr_state: begin
        M_mgr_state_d = IDLE_mgr_state;
        M_emit_state_d = IDLE_emit_state;
        M_via0_slow_clock = 1'h1;
        M_via1_slow_clock = 1'h1;
        if (M_ssm_valid_ram_access) begin
          if (M_rw_reg_in_q == 1'h0) begin
            M_mig_mem_in[160+0-:1] = 1'h1;
            M_mig_mem_in[32+127-:128] = M_data_reg_in_q;
            M_mig_mem_in[0+27-:28] = {8'h00, M_ssm_addr_out, 3'h0};
            if (M_mig_mem_out[130+0-:1]) begin
              M_emit_state_d = SDRAM_WAIT_WRITE_emit_state;
            end else begin
              M_emit_state_d = SDRAM_WRITE_CMD_emit_state;
            end
          end
        end
        if (M_addr_reg_in_q[8+7-:8] == 8'hc4) begin
          if (M_addr_reg_in_q[7+0-:1] == 1'h0) begin
            M_via0_strobe = 1'h1;
          end else begin
            M_via1_strobe = 1'h1;
          end
        end
      end
    endcase
    
    case (M_emit_state_q)
      SDRAM_WAIT_READ_emit_state: begin
        if (M_mig_mem_out[128+0-:1]) begin
          M_data_reg_out_d = M_mig_mem_out[0+0+7-:8];
          M_emit_state_d = IDLE_emit_state;
        end
      end
      SDRAM_WAIT_WRITE_emit_state: begin
        if (M_mig_mem_out[130+0-:1]) begin
          M_emit_state_d = SDRAM_WRITE_CMD_emit_state;
        end
      end
      SDRAM_WRITE_CMD_emit_state: begin
        M_mig_mem_in[31+0-:1] = 1'h1;
        M_mig_mem_in[28+2-:3] = 1'h0;
        if (M_mig_mem_out[129+0-:1]) begin
          M_emit_state_d = IDLE_emit_state;
        end
      end
      MOCKINGBOARD0_emit_state: begin
        M_data_reg_out_d = M_via0_data_out;
      end
      MOCKINGBOARD1_emit_state: begin
        M_data_reg_out_d = M_via1_data_out;
      end
    endcase
  end
  
  always @(posedge M_mig_ui_clk) begin
    if (M_mig_sync_rst == 1'b1) begin
      M_addr_reg_in_q <= 1'h0;
      M_rw_reg_in_q <= 1'h0;
      M_data_reg_in_q <= 1'h0;
      M_data_reg_out_q <= 1'h0;
      M_data_reg_out_en_q <= 1'h0;
      M_inhibit_assert_en_q <= 1'h0;
      M_mgr_state_q <= 1'h0;
      M_emit_state_q <= 1'h0;
    end else begin
      M_addr_reg_in_q <= M_addr_reg_in_d;
      M_rw_reg_in_q <= M_rw_reg_in_d;
      M_data_reg_in_q <= M_data_reg_in_d;
      M_data_reg_out_q <= M_data_reg_out_d;
      M_data_reg_out_en_q <= M_data_reg_out_en_d;
      M_inhibit_assert_en_q <= M_inhibit_assert_en_d;
      M_mgr_state_q <= M_mgr_state_d;
      M_emit_state_q <= M_emit_state_d;
    end
  end
  
endmodule
