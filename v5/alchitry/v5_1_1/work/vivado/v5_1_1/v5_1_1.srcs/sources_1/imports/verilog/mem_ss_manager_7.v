/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mem_ss_manager_7 (
    input clk,
    input [15:0] addr_in,
    input addr_in_valid,
    input rw,
    input bus_reset,
    output reg [16:0] addr_out,
    output reg valid_ram_access,
    output reg slot_access,
    output reg [2:0] c8_owner
  );
  
  
  
  localparam SS80STORE = 7'h00;
  
  localparam AUXREAD = 7'h01;
  
  localparam AUXWRITE = 7'h02;
  
  localparam INTCXROM = 7'h03;
  
  localparam ALTZP = 7'h04;
  
  localparam SLOTC3ROM = 7'h05;
  
  localparam PAGE2 = 7'h2a;
  
  localparam HIRES = 7'h2b;
  
  reg [15:0] M_addr_in_reg_d, M_addr_in_reg_q = 1'h0;
  reg M_rw_reg_d, M_rw_reg_q = 1'h0;
  reg M_ss_80store_d, M_ss_80store_q = 1'h0;
  reg M_ss_auxread_d, M_ss_auxread_q = 1'h0;
  reg M_ss_auxwrite_d, M_ss_auxwrite_q = 1'h0;
  reg M_ss_intcxrom_d, M_ss_intcxrom_q = 1'h0;
  reg M_ss_altzp_d, M_ss_altzp_q = 1'h0;
  reg M_ss_slotc3rom_d, M_ss_slotc3rom_q = 1'h0;
  reg M_ss_page2_d, M_ss_page2_q = 1'h0;
  reg M_ss_hires_d, M_ss_hires_q = 1'h0;
  reg M_ss_lcram_bank1_d, M_ss_lcram_bank1_q = 1'h0;
  reg M_ss_lcram_writeinh_d, M_ss_lcram_writeinh_q = 1'h0;
  reg M_ss_lcram_read_d, M_ss_lcram_read_q = 1'h0;
  reg M_ss_lcram_writeinh_last_d, M_ss_lcram_writeinh_last_q = 1'h0;
  reg [2:0] M_c8_select_d, M_c8_select_q = 1'h0;
  reg M_ss_slot_access_d, M_ss_slot_access_q = 1'h0;
  
  always @* begin
    M_ss_lcram_read_d = M_ss_lcram_read_q;
    M_c8_select_d = M_c8_select_q;
    M_ss_auxread_d = M_ss_auxread_q;
    M_ss_lcram_writeinh_d = M_ss_lcram_writeinh_q;
    M_ss_auxwrite_d = M_ss_auxwrite_q;
    M_ss_slot_access_d = M_ss_slot_access_q;
    M_ss_page2_d = M_ss_page2_q;
    M_ss_intcxrom_d = M_ss_intcxrom_q;
    M_ss_80store_d = M_ss_80store_q;
    M_ss_lcram_bank1_d = M_ss_lcram_bank1_q;
    M_ss_lcram_writeinh_last_d = M_ss_lcram_writeinh_last_q;
    M_rw_reg_d = M_rw_reg_q;
    M_addr_in_reg_d = M_addr_in_reg_q;
    M_ss_altzp_d = M_ss_altzp_q;
    M_ss_slotc3rom_d = M_ss_slotc3rom_q;
    M_ss_hires_d = M_ss_hires_q;
    
    if (addr_in_valid) begin
      M_addr_in_reg_d = addr_in;
      M_rw_reg_d = rw;
      if (!rw && addr_in[8+7-:8] == 8'hc0) begin
        
        case (addr_in[1+6-:7])
          7'h00: begin
            M_ss_80store_d = addr_in[0+0-:1];
          end
          7'h01: begin
            M_ss_auxread_d = addr_in[0+0-:1];
          end
          7'h02: begin
            M_ss_auxwrite_d = addr_in[0+0-:1];
          end
          7'h03: begin
            M_ss_intcxrom_d = addr_in[0+0-:1];
          end
          7'h04: begin
            M_ss_intcxrom_d = addr_in[0+0-:1];
          end
          7'h05: begin
            M_ss_slotc3rom_d = addr_in[0+0-:1];
          end
          7'h2a: begin
            M_ss_page2_d = addr_in[0+0-:1];
          end
          7'h2b: begin
            M_ss_hires_d = addr_in[0+0-:1];
          end
        endcase
      end
      if (addr_in[4+11-:12] == 12'hc08) begin
        M_ss_lcram_writeinh_last_d = addr_in[0+0-:1] & rw;
        M_ss_lcram_bank1_d = addr_in[3+0-:1];
        M_ss_lcram_read_d = (addr_in[1+0-:1] == addr_in[0+0-:1]);
        M_ss_lcram_writeinh_d = !(M_ss_lcram_writeinh_last_q & addr_in[0+0-:1] & rw);
      end
      M_ss_slot_access_d = 1'h0;
      if (addr_in[8+3-:4] != 1'h0) begin
        if (addr_in[11+0-:1] == 1'h0) begin
          if (!M_ss_intcxrom_q) begin
            M_c8_select_d = addr_in[8+2-:3];
            M_ss_slot_access_d = 1'h1;
          end
          if (addr_in[8+3-:4] == 4'h3) begin
            if (!M_ss_slotc3rom_q) begin
              M_c8_select_d = 3'h0;
              M_ss_slot_access_d = 1'h0;
            end
          end
        end
      end
      if (addr_in == 12'hfff) begin
        M_c8_select_d = 3'h0;
      end
      if (!bus_reset) begin
        M_ss_80store_d = 1'h0;
        M_ss_auxread_d = 1'h0;
        M_ss_auxwrite_d = 1'h0;
        M_ss_intcxrom_d = 1'h0;
        M_ss_altzp_d = 1'h0;
        M_ss_slotc3rom_d = 1'h0;
        M_ss_page2_d = 1'h0;
        M_ss_hires_d = 1'h0;
        M_ss_lcram_bank1_d = 1'h0;
        M_ss_lcram_writeinh_d = 1'h0;
        M_ss_lcram_read_d = 1'h0;
        M_ss_lcram_writeinh_last_d = 1'h0;
        M_c8_select_d = 3'h0;
      end
    end
    slot_access = M_ss_slot_access_q;
    c8_owner = M_c8_select_q;
    valid_ram_access = 1'h1;
    addr_out[0+15-:16] = M_addr_in_reg_q;
    addr_out[16+0-:1] = 1'h0;
    if (M_addr_in_reg_q[12+3-:4] == 4'hc) begin
      valid_ram_access = 1'h0;
    end else begin
      if (M_addr_in_reg_q[9+6-:7] == 7'h00) begin
        addr_out[16+0-:1] = M_ss_altzp_q;
      end else begin
        if (M_addr_in_reg_q[14+1-:2] == 2'h3) begin
          addr_out[16+0-:1] = M_ss_altzp_q;
          if (M_ss_lcram_bank1_q && (M_addr_in_reg_q[13+1-:2] == 2'h1)) begin
            addr_out[13+0-:1] = 1'h0;
          end
          if (M_rw_reg_q && !M_ss_lcram_read_q) begin
            valid_ram_access = 1'h0;
          end
          if (!M_rw_reg_q && M_ss_lcram_writeinh_q) begin
            valid_ram_access = 1'h0;
          end
        end else begin
          if (M_rw_reg_q) begin
            addr_out[16+0-:1] = M_ss_auxread_q;
          end else begin
            addr_out[16+0-:1] = M_ss_auxwrite_q;
          end
          if (M_ss_80store_q) begin
            if (M_addr_in_reg_q[11+4-:5] == 5'h01) begin
              addr_out[16+0-:1] = M_ss_page2_q;
            end else begin
              if (M_ss_hires_q && M_addr_in_reg_q[13+2-:3] == 3'h1) begin
                addr_out[16+0-:1] = M_ss_page2_q;
              end
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    M_addr_in_reg_q <= M_addr_in_reg_d;
    M_rw_reg_q <= M_rw_reg_d;
    M_ss_80store_q <= M_ss_80store_d;
    M_ss_auxread_q <= M_ss_auxread_d;
    M_ss_auxwrite_q <= M_ss_auxwrite_d;
    M_ss_intcxrom_q <= M_ss_intcxrom_d;
    M_ss_altzp_q <= M_ss_altzp_d;
    M_ss_slotc3rom_q <= M_ss_slotc3rom_d;
    M_ss_page2_q <= M_ss_page2_d;
    M_ss_hires_q <= M_ss_hires_d;
    M_ss_lcram_bank1_q <= M_ss_lcram_bank1_d;
    M_ss_lcram_writeinh_q <= M_ss_lcram_writeinh_d;
    M_ss_lcram_read_q <= M_ss_lcram_read_d;
    M_ss_lcram_writeinh_last_q <= M_ss_lcram_writeinh_last_d;
    M_c8_select_q <= M_c8_select_d;
    M_ss_slot_access_q <= M_ss_slot_access_d;
  end
  
endmodule
