// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

#define PHI0_GPIO 0
#define TEENSY_EMIT_GPIO 1

// ------------ //
// phi0_control //
// ------------ //

#define phi0_control_wrap_target 0
#define phi0_control_wrap 9

static const uint16_t phi0_control_program_instructions[] = {
            //     .wrap_target
    0x8000, //  0: push   noblock                    
    0x2100, //  1: wait   0 gpio, 0              [1] 
    0xe00a, //  2: set    pins, 10                   
    0x3f80, //  3: wait   1 gpio, 0              [31]
    0xa942, //  4: nop                           [9] 
    0xe00b, //  5: set    pins, 11                   
    0x00c9, //  6: jmp    pin, 9                     
    0xe005, //  7: set    pins, 5                    
    0x0000, //  8: jmp    0                          
    0xe009, //  9: set    pins, 9                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program phi0_control_program = {
    .instructions = phi0_control_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config phi0_control_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + phi0_control_wrap_target, offset + phi0_control_wrap);
    return c;
}
#endif

// ----------- //
// phi0_signal //
// ----------- //

#define phi0_signal_wrap_target 0
#define phi0_signal_wrap 7

static const uint16_t phi0_signal_program_instructions[] = {
            //     .wrap_target
    0x8000, //  0: push   noblock                    
    0x3600, //  1: wait   0 gpio, 0              [22]
    0xe100, //  2: set    pins, 0                [1] 
    0xe001, //  3: set    pins, 1                    
    0x3f80, //  4: wait   1 gpio, 0              [31]
    0xa842, //  5: nop                           [8]
    0xe100, //  6: set    pins, 0                [1] 
    0xe001, //  7: set    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program phi0_signal_program = {
    .instructions = phi0_signal_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config phi0_signal_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + phi0_signal_wrap_target, offset + phi0_signal_wrap);
    return c;
}
#endif

// ------ //
// rdy_tx //
// ------ //

#define rdy_tx_wrap_target 0
#define rdy_tx_wrap 4

static const uint16_t rdy_tx_program_instructions[] = {
            //     .wrap_target
    0x2080, //  0: wait   1 gpio, 0                  
    0x00c4, //  1: jmp    pin, 4                     
    0xe000, //  2: set    pins, 0                    
    0x0000, //  3: jmp    0                          
    0xe001, //  4: set    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program rdy_tx_program = {
    .instructions = rdy_tx_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config rdy_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + rdy_tx_wrap_target, offset + rdy_tx_wrap);
    return c;
}
#endif

// ------ //
// inh_tx //
// ------ //

#define inh_tx_wrap_target 0
#define inh_tx_wrap 4

static const uint16_t inh_tx_program_instructions[] = {
            //     .wrap_target
    0x3980, //  0: wait   1 gpio, 0              [25]
    0x00c4, //  1: jmp    pin, 4                     
    0xe000, //  2: set    pins, 0                    
    0x0000, //  3: jmp    0                          
    0xe001, //  4: set    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program inh_tx_program = {
    .instructions = inh_tx_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config inh_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + inh_tx_wrap_target, offset + inh_tx_wrap);
    return c;
}
#endif
